"use strict";(self.webpackChunkmodio_docs=self.webpackChunkmodio_docs||[]).push([[5836],{4226:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var t=n(4848),d=n(8453);const s={id:"installation-and-setup",title:"Installation & Setup",slug:"/cppsdk/setup/",sidebar_position:1,custom_edit_url:"https://github.com/modio/modio-sdk-internal/blob/develop/doc/installation-and-setup.mdx"},o=void 0,r={id:"game-integration/cppsdk/installation-and-setup",title:"Installation & Setup",description:"Prerequisites",source:"@site/public/en-us/game-integration/cppsdk/installation-and-setup.mdx",sourceDirName:"game-integration/cppsdk",slug:"/cppsdk/setup/",permalink:"/cppsdk/setup/",draft:!1,unlisted:!1,editUrl:"https://github.com/modio/modio-sdk-internal/blob/develop/doc/installation-and-setup.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"installation-and-setup",title:"Installation & Setup",slug:"/cppsdk/setup/",sidebar_position:1,custom_edit_url:"https://github.com/modio/modio-sdk-internal/blob/develop/doc/installation-and-setup.mdx"},sidebar:"sidebar",previous:{title:"Overview",permalink:"/cppsdk/"},next:{title:"Getting Started",permalink:"/cppsdk/getting-started/"}},l={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Dependencies",id:"dependencies",level:2},{value:"Building the SDK",id:"building-the-sdk",level:2},{value:"Standalone",id:"standalone",level:3},{value:"Generate Source",id:"generate-source",level:4},{value:"Build the project",id:"build-the-project",level:4},{value:"Install the project",id:"install-the-project",level:4},{value:"Header-only mode",id:"header-only-mode",level:5},{value:"Separate compilation mode",id:"separate-compilation-mode",level:5},{value:"Static library mode",id:"static-library-mode",level:5},{value:"Other Build Systems",id:"other-build-systems",level:3},{value:"CMake preset targets",id:"cmake-preset-targets",level:3},{value:"Sample Code",id:"sample-code",level:2},{value:"Deprecated code",id:"deprecated-code",level:3},{value:"Experimental Functionality",id:"experimental-functionality",level:3},{value:"Clang compiler in Visual Studio",id:"clang-compiler-in-visual-studio",level:3},{value:"Custom <code>fmt</code> library",id:"custom-fmt-library",level:4},{value:"Next Steps",id:"next-steps",level:2}];function a(e){const i={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsx)(i.p,{children:'To build on Windows, the mod.io SDK requires Visual Studio 2019 or 2022 with the "Desktop Development with C++" workload. This workload includes CMake (version 3.20 or higher), Ninja, and MSVC C++ compiler.'}),"\n",(0,t.jsx)(i.p,{children:"If you are building for other platforms, you can follow each platform's requirements below."}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"/cppsdk/windows/getting-started/",children:"Windows Getting Started"})}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"/cppsdk/macos/getting-started/",children:"Mac Getting Started"})}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"/cppsdk/linux/getting-started/",children:"Linux Getting Started"})}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"/cppsdk/ios/getting-started/",children:"iOS Getting Started"})}),"\n",(0,t.jsx)(i.p,{children:(0,t.jsx)(i.a,{href:"/cppsdk/android/getting-started/",children:"Android Getting Started"})}),"\n",(0,t.jsx)(i.h2,{id:"dependencies",children:"Dependencies"}),"\n",(0,t.jsx)(i.p,{children:"The mod.io SDK has the following dependencies:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"https://github.com/modio/modio-integration-asio",children:"asio"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"https://github.com/modio/modio-integration-filesystem",children:"filesystem"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"https://github.com/fmtlib/fmt",children:"fmt"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"https://github.com/nekipelov/httpparser",children:"httpparser"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"https://github.com/nlohmann/json",children:"json"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"https://github.com/modio/modio-integration-optional",children:"optional"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"https://github.com/nemtrif/utfcpp",children:"utfcpp"})}),"\n",(0,t.jsx)(i.li,{children:(0,t.jsx)(i.a,{href:"https://github.com/Naios/function2",children:"function2"})}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.a,{href:"https://github.com/ARMmbed/mbedtls",children:"mbedtls"})," (linux)"]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"While it is possible to download the SDK source code as a zip file from GitHub, a recursive clone will also download all dependencies. To ensure these dependencies are downloaded, use the following commands:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-zsh",children:"git clone --recurse-submodule https://github.com/modio/modio-sdk\ncd modio-sdk\n"})}),"\n",(0,t.jsx)(i.h2,{id:"building-the-sdk",children:"Building the SDK"}),"\n",(0,t.jsx)(i.p,{children:"The mod.io SDK can be consumed either inside a CMake project, or standalone as either header-only, in separate compilation mode, or as a static library."}),"\n",(0,t.jsx)(i.h3,{id:"standalone",children:"Standalone"}),"\n",(0,t.jsxs)(i.p,{children:["When building the mod.io SDK in standalone mode, ",(0,t.jsx)(i.code,{children:"Ninja"})," is used as the default code generator. The following steps apply when using Ninja as a code generator. If you wish to use a different code generator, such as the Visual Studio code generator, go to the ",(0,t.jsx)(i.a,{href:"#other-build-systems",children:"Other Build Systems"})," section."]}),"\n",(0,t.jsxs)(i.p,{children:["The included ",(0,t.jsx)(i.code,{children:"CMakePresets.json"})," includes the most common configurations as presets and require ",(0,t.jsx)(i.code,{children:"Ninja"})," to be in your path. For a full explanation of all platforms and targets that are part of the presets, click ",(0,t.jsx)(i.a,{href:"#cmake-preset-targets",children:"here"}),"."]}),"\n",(0,t.jsx)(i.admonition,{type:"note",children:(0,t.jsx)(i.p,{children:"If you have Visual Studio installed as your development environment, you can run the following commands from the Developer Command Prompt to easily have your environment configured. Otherwise, ensure that CMake and Ninja are part of your PATH."})}),"\n",(0,t.jsx)(i.h4,{id:"generate-source",children:"Generate Source"}),"\n",(0,t.jsxs)(i.p,{children:["To generate build files using Ninja, run ",(0,t.jsx)(i.code,{children:"cmake -S <modio-sdk folder> --preset=win"}),". This will produce a Windows build configuration using Ninja at ",(0,t.jsx)(i.code,{children:"<modio-sdk folder>/out/build/win"}),". This directory can then be used to build the SDK in the way you wish to include it."]}),"\n",(0,t.jsx)(i.h4,{id:"build-the-project",children:"Build the project"}),"\n",(0,t.jsxs)(i.p,{children:["To build the SDK, run ",(0,t.jsx)(i.code,{children:"cmake --build <modio-sdk folder>/out/build/win"}),"."]}),"\n",(0,t.jsx)(i.h4,{id:"install-the-project",children:"Install the project"}),"\n",(0,t.jsxs)(i.p,{children:["Run ",(0,t.jsx)(i.code,{children:"cmake --install <modio-sdk folder>/out/build/win"}),". This will produce 3 separate folders in the ",(0,t.jsx)(i.code,{children:"<modio-sdk folder>/out/install/win"})," directory."]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"header_only"})," - directory with the header-only version of the SDK."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"source"})," - directory containing the implementation files of the SDK for use in 'separate compilation' mode."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.code,{children:"static"})," - directory containing the static library binaries and necessary public include headers"]}),"\n"]}),"\n",(0,t.jsx)(i.h5,{id:"header-only-mode",children:"Header-only mode"}),"\n",(0,t.jsxs)(i.p,{children:["Simply add each of the subdirectories in ",(0,t.jsx)(i.code,{children:"header_only"})," to your include directories. Then, in ",(0,t.jsx)(i.code,{children:"your_project"})," source file add ",(0,t.jsx)(i.code,{children:'#include "modio/ModioSDK.h"'})]}),"\n",(0,t.jsx)(i.h5,{id:"separate-compilation-mode",children:"Separate compilation mode"}),"\n",(0,t.jsxs)(i.p,{children:["If you prefer to compile the source code directly, add the ",(0,t.jsx)(i.code,{children:"cpp"})," files in the ",(0,t.jsx)(i.code,{children:"source"})," directory, along with the ",(0,t.jsx)(i.code,{children:"include"})," from the header-only mode.\nYou must add ",(0,t.jsx)(i.code,{children:"MODIO_SEPARATE_COMPILATION"})," to your project's compiler definitions. Then, in ",(0,t.jsx)(i.code,{children:"your_project"})," source file add ",(0,t.jsx)(i.code,{children:'#include "modio/ModioSDK.h"'})]}),"\n",(0,t.jsx)(i.h5,{id:"static-library-mode",children:"Static library mode"}),"\n",(0,t.jsxs)(i.p,{children:["Add the ",(0,t.jsx)(i.code,{children:"inc"})," directory inside ",(0,t.jsx)(i.code,{children:"static"})," to your ",(0,t.jsx)(i.code,{children:"include"})," and link against the static binary in the ",(0,t.jsx)(i.code,{children:"lib"})," folder.  You must add ",(0,t.jsx)(i.code,{children:"MODIO_SEPARATE_COMPILATION"})," to your project's compiler definitions. Then, in ",(0,t.jsx)(i.code,{children:"your_project"})," source file add ",(0,t.jsx)(i.code,{children:'#include "modio/ModioSDK.h"'})]}),"\n",(0,t.jsx)(i.h3,{id:"other-build-systems",children:"Other Build Systems"}),"\n",(0,t.jsxs)(i.p,{children:["If you use a different build system or wish to generate project files for inclusion in an existing Visual Studio solution, you can override the default CMake generator. For example, it is possible to use an MSBuild-based Visual Studio Solution via ",(0,t.jsx)(i.code,{children:'make -S <modio-sdk folder> --preset=win -G "Visual Studio 17 2022"'}),". This will produce a VS Solution file in ",(0,t.jsx)(i.code,{children:"out\\build\\win"}),"."]}),"\n",(0,t.jsx)(i.h3,{id:"cmake-preset-targets",children:"CMake preset targets"}),"\n",(0,t.jsxs)(i.table,{children:[(0,t.jsx)(i.thead,{children:(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.th,{children:"Platform"}),(0,t.jsx)(i.th,{children:"Preset"}),(0,t.jsx)(i.th,{children:"Target"}),(0,t.jsx)(i.th,{children:"Build System"})]})}),(0,t.jsxs)(i.tbody,{children:[(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"Windows"}),(0,t.jsx)(i.td,{children:"win"}),(0,t.jsx)(i.td,{children:"Release"}),(0,t.jsx)(i.td,{children:"Ninja or Visual Studio 2022"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"Windows"}),(0,t.jsx)(i.td,{children:"win-debug"}),(0,t.jsx)(i.td,{children:"Debug"}),(0,t.jsx)(i.td,{children:"Ninja or Visual Studio 2022"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"Windows"}),(0,t.jsx)(i.td,{children:"win-dbginfo"}),(0,t.jsx)(i.td,{children:"Pre-Release"}),(0,t.jsx)(i.td,{children:"Ninja or Visual Studio 2022"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"Linux"}),(0,t.jsx)(i.td,{children:"linux64"}),(0,t.jsx)(i.td,{children:"Release"}),(0,t.jsx)(i.td,{children:"Ninja"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"Linux"}),(0,t.jsx)(i.td,{children:"linux64-debug"}),(0,t.jsx)(i.td,{children:"Debug"}),(0,t.jsx)(i.td,{children:"Ninja"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"Linux"}),(0,t.jsx)(i.td,{children:"linux64-dbginfo"}),(0,t.jsx)(i.td,{children:"Pre-Release"}),(0,t.jsx)(i.td,{children:"Ninja"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"macOS"}),(0,t.jsx)(i.td,{children:"macOS"}),(0,t.jsx)(i.td,{children:"Release"}),(0,t.jsx)(i.td,{children:"Ninja or XCode"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"macOS"}),(0,t.jsx)(i.td,{children:"macOS-debug"}),(0,t.jsx)(i.td,{children:"Debug"}),(0,t.jsx)(i.td,{children:"Ninja or XCode"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"macOS"}),(0,t.jsx)(i.td,{children:"macOS-dbginfo"}),(0,t.jsx)(i.td,{children:"Pre-Release"}),(0,t.jsx)(i.td,{children:"Ninja or XCode"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"iOS"}),(0,t.jsx)(i.td,{children:"iOS"}),(0,t.jsx)(i.td,{children:"Release"}),(0,t.jsx)(i.td,{children:"Ninja or XCode"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"iOS"}),(0,t.jsx)(i.td,{children:"iOS-debug"}),(0,t.jsx)(i.td,{children:"Debug"}),(0,t.jsx)(i.td,{children:"Ninja or XCode"})]}),(0,t.jsxs)(i.tr,{children:[(0,t.jsx)(i.td,{children:"iOS"}),(0,t.jsx)(i.td,{children:"iOS-dbginfo"}),(0,t.jsx)(i.td,{children:"Pre-Release"}),(0,t.jsx)(i.td,{children:"Ninja or XCode"})]})]})]}),"\n",(0,t.jsxs)(i.p,{children:["Debug presets have the ",(0,t.jsx)(i.code,{children:"-debug"})," suffix, and Release-with-debug-info is ",(0,t.jsx)(i.code,{children:"-dbginfo"}),". For example, if you want to build the SDK in debug configuration specify ",(0,t.jsx)(i.code,{children:"win-debug"})," as the preset name."]}),"\n",(0,t.jsx)(i.admonition,{type:"note",children:(0,t.jsx)(i.p,{children:'If you are compiling the mod.io SDK using different architectures, you can change the preset compilation folder by modifying the "CMAKE_INSTALL_PREFIX" path.'})}),"\n",(0,t.jsx)(i.h2,{id:"sample-code",children:"Sample Code"}),"\n",(0,t.jsxs)(i.p,{children:["The mod.io SDK includes sample code demonstrating all of the core functionality in the ",(0,t.jsx)(i.code,{children:"examples"})," directory.  If you want to build the examples, append ",(0,t.jsx)(i.code,{children:" -DMODIO_BUILD_EXAMPLES=true"})," to your CMake generation script, ie ",(0,t.jsx)(i.code,{children:"cmake -S <modio-sdk folder> --preset=win -DMODIO_BUILD_EXAMPLES=true"})]}),"\n",(0,t.jsx)(i.h3,{id:"deprecated-code",children:"Deprecated code"}),"\n",(0,t.jsx)(i.p,{children:"Some classes, methods, types etc will get deprecated over time. Generally speaking, mod.io will flag deprecated methods that will result in a warning and document all deprecations as part of release notes to assist in migration.\nDeprecated functionality will remain for a minimum of 3 releases to allow for transition to the new functionality before being removed."}),"\n",(0,t.jsxs)(i.p,{children:["If you want to disable deprecated code to avoid warnings or just its usage, you can add ",(0,t.jsx)(i.code,{children:"define MODIO_NO_DEPRECATED"}),", this define will avoid compilation of deprecated code."]}),"\n",(0,t.jsx)(i.h3,{id:"experimental-functionality",children:"Experimental Functionality"}),"\n",(0,t.jsx)(i.p,{children:"Some functionality in the SDK is marked as experimental. While these will generally be fully functional, the interface is subject to breaking changes that do not follow the above deprecation path."}),"\n",(0,t.jsx)(i.h3,{id:"clang-compiler-in-visual-studio",children:"Clang compiler in Visual Studio"}),"\n",(0,t.jsxs)(i.p,{children:["It is possible to employ the Clang compiler provided by Visual Studio Installer under the name ",(0,t.jsx)(i.code,{children:"C++ Clang Compiler for Windows"}),". You can update the ",(0,t.jsx)(i.code,{children:"CMakePreset.json"})," using the following variables:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{children:'"cacheVariables": \n{\n  "CMAKE_C_COMPILER":\n  {\n    "value": "clang-cl.exe",\n    "type": "STRING"\n  },\n  "CMAKE_CXX_COMPILER":\n  {\n    "value": "clang-cpp.exe",\n    "type": "STRING"\n  }\n}\n'})}),"\n",(0,t.jsxs)(i.h4,{id:"custom-fmt-library",children:["Custom ",(0,t.jsx)(i.code,{children:"fmt"})," library"]}),"\n",(0,t.jsxs)(i.p,{children:["If you have a custom version of the ",(0,t.jsx)(i.code,{children:"fmt"})," library, you can modify the linking stage defining ",(0,t.jsx)(i.code,{children:"MODIO_USE_CUSTOM_FMT"}),". This define signals the CMake build system to use a custom version of the library. Also, it requires that you define ",(0,t.jsx)(i.code,{children:"MODIO_CUSTOM_FMT_PATH"})," to the system path that contains the ",(0,t.jsx)(i.code,{children:"fmt"})," library to use."]}),"\n",(0,t.jsxs)(i.p,{children:["The directory given to ",(0,t.jsx)(i.code,{children:"MODIO_CUSTOM_FMT_PATH"})," should contain a CMakeLists.txt which exposes the ",(0,t.jsx)(i.code,{children:"fmt"})," and/or ",(0,t.jsx)(i.code,{children:"fmt-header-only"})," targets."]}),"\n",(0,t.jsxs)(i.p,{children:["By default the SDK will consume the ",(0,t.jsx)(i.code,{children:"fmt-header-only"})," target. Define ",(0,t.jsx)(i.code,{children:"MODIO_CUSTOM_FMT_STATIC"})," to ",(0,t.jsx)(i.code,{children:"true"})," to override this and request the consumption of the ",(0,t.jsx)(i.code,{children:"fmt"})," static library target instead."]}),"\n",(0,t.jsx)(i.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(i.p,{children:["To begin using the SDK, please read our ",(0,t.jsx)(i.a,{href:"/cppsdk/getting-started/",children:"Getting Started Guide"})," for a detailed explanation of initialization and usage."]})]})}function h(e={}){const{wrapper:i}={...(0,d.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>r});var t=n(6540);const d={},s=t.createContext(d);function o(e){const i=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:o(e.components),t.createElement(s.Provider,{value:i},e.children)}}}]);